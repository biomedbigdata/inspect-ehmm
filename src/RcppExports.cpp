// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// forward_backward
List forward_backward(NumericMatrix initP, NumericMatrix trans, NumericMatrix lliks, IntegerVector seqlens, NumericMatrix posteriors, int nthreads);
RcppExport SEXP _ehmm_forward_backward(SEXP initPSEXP, SEXP transSEXP, SEXP lliksSEXP, SEXP seqlensSEXP, SEXP posteriorsSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type initP(initPSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type trans(transSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type lliks(lliksSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type seqlens(seqlensSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type posteriors(posteriorsSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(forward_backward(initP, trans, lliks, seqlens, posteriors, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// viterbi
List viterbi(NumericMatrix vscores, NumericMatrix initP, NumericMatrix trans, NumericMatrix lliks, NumericVector seqlens, IntegerVector endstate);
RcppExport SEXP _ehmm_viterbi(SEXP vscoresSEXP, SEXP initPSEXP, SEXP transSEXP, SEXP lliksSEXP, SEXP seqlensSEXP, SEXP endstateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type vscores(vscoresSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type initP(initPSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type trans(transSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type lliks(lliksSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type seqlens(seqlensSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type endstate(endstateSEXP);
    rcpp_result_gen = Rcpp::wrap(viterbi(vscores, initP, trans, lliks, seqlens, endstate));
    return rcpp_result_gen;
END_RCPP
}
// testSchedule
Rcpp::List testSchedule(Rcpp::NumericVector jobs, int nthreads, int type);
RcppExport SEXP _ehmm_testSchedule(SEXP jobsSEXP, SEXP nthreadsSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type jobs(jobsSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(testSchedule(jobs, nthreads, type));
    return rcpp_result_gen;
END_RCPP
}
// testColPost
Rcpp::NumericMatrix testColPost(Rcpp::NumericMatrix post, Rcpp::List m2u, int nthreads);
RcppExport SEXP _ehmm_testColPost(SEXP postSEXP, SEXP m2uSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type post(postSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type m2u(m2uSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(testColPost(post, m2u, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// tabFast
Rcpp::IntegerVector tabFast(Rcpp::IntegerVector counts);
RcppExport SEXP _ehmm_tabFast(SEXP countsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type counts(countsSEXP);
    rcpp_result_gen = Rcpp::wrap(tabFast(counts));
    return rcpp_result_gen;
END_RCPP
}
// labelCounts
Rcpp::IntegerVector labelCounts(Rcpp::NumericVector empirical, Rcpp::NumericVector theoretical);
RcppExport SEXP _ehmm_labelCounts(SEXP empiricalSEXP, SEXP theoreticalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type empirical(empiricalSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type theoretical(theoreticalSEXP);
    rcpp_result_gen = Rcpp::wrap(labelCounts(empirical, theoretical));
    return rcpp_result_gen;
END_RCPP
}
// clusterAverages2
Rcpp::List clusterAverages2(Rcpp::NumericMatrix counts, Rcpp::NumericMatrix coords, Rcpp::List clusters, int nthreads);
RcppExport SEXP _ehmm_clusterAverages2(SEXP countsSEXP, SEXP coordsSEXP, SEXP clustersSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type counts(countsSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type coords(coordsSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type clusters(clustersSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(clusterAverages2(counts, coords, clusters, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// clusterAverages
Rcpp::List clusterAverages(Rcpp::NumericMatrix counts, Rcpp::List clusters, int nthreads);
RcppExport SEXP _ehmm_clusterAverages(SEXP countsSEXP, SEXP clustersSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type counts(countsSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type clusters(clustersSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(clusterAverages(counts, clusters, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// fillPosteriors
Rcpp::NumericMatrix fillPosteriors(Rcpp::IntegerMatrix coords, Rcpp::List clusters, int nclust, int nthreads);
RcppExport SEXP _ehmm_fillPosteriors(SEXP coordsSEXP, SEXP clustersSEXP, SEXP nclustSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type coords(coordsSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type clusters(clustersSEXP);
    Rcpp::traits::input_parameter< int >::type nclust(nclustSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(fillPosteriors(coords, clusters, nclust, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// rowdotprod
Rcpp::NumericMatrix rowdotprod(Rcpp::NumericMatrix counts, bool besselCorr, int nthreads);
RcppExport SEXP _ehmm_rowdotprod(SEXP countsSEXP, SEXP besselCorrSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type counts(countsSEXP);
    Rcpp::traits::input_parameter< bool >::type besselCorr(besselCorrSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(rowdotprod(counts, besselCorr, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// discretizeRows
Rcpp::IntegerMatrix discretizeRows(Rcpp::NumericMatrix scores, int nlevels, int nthreads);
RcppExport SEXP _ehmm_discretizeRows(SEXP scoresSEXP, SEXP nlevelsSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type scores(scoresSEXP);
    Rcpp::traits::input_parameter< int >::type nlevels(nlevelsSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(discretizeRows(scores, nlevels, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// splitAxes
Rcpp::IntegerMatrix splitAxes(Rcpp::NumericMatrix scores, int nsplit, int nthreads);
RcppExport SEXP _ehmm_splitAxes(SEXP scoresSEXP, SEXP nsplitSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type scores(scoresSEXP);
    Rcpp::traits::input_parameter< int >::type nsplit(nsplitSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(splitAxes(scores, nsplit, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// splitAxesInt
Rcpp::IntegerMatrix splitAxesInt(Rcpp::IntegerMatrix scores, int nsplit, int nthreads);
RcppExport SEXP _ehmm_splitAxesInt(SEXP scoresSEXP, SEXP nsplitSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type scores(scoresSEXP);
    Rcpp::traits::input_parameter< int >::type nsplit(nsplitSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(splitAxesInt(scores, nsplit, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// KL_dist_mat_LN
Rcpp::NumericMatrix KL_dist_mat_LN(Rcpp::NumericMatrix mus, Rcpp::NumericMatrix sigmasqs, int nthreads);
RcppExport SEXP _ehmm_KL_dist_mat_LN(SEXP musSEXP, SEXP sigmasqsSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type mus(musSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type sigmasqs(sigmasqsSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(KL_dist_mat_LN(mus, sigmasqs, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// KL_dist_mat
Rcpp::NumericMatrix KL_dist_mat(Rcpp::NumericMatrix nbs, double r, int nthreads);
RcppExport SEXP _ehmm_KL_dist_mat(SEXP nbsSEXP, SEXP rSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type nbs(nbsSEXP);
    Rcpp::traits::input_parameter< double >::type r(rSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(KL_dist_mat(nbs, r, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// findUniqueSeeds
Rcpp::IntegerVector findUniqueSeeds(Rcpp::IntegerMatrix counts, Rcpp::IntegerVector permutation, int k);
RcppExport SEXP _ehmm_findUniqueSeeds(SEXP countsSEXP, SEXP permutationSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type counts(countsSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type permutation(permutationSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(findUniqueSeeds(counts, permutation, k));
    return rcpp_result_gen;
END_RCPP
}
// support_openmp
bool support_openmp();
RcppExport SEXP _ehmm_support_openmp() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(support_openmp());
    return rcpp_result_gen;
END_RCPP
}
// llik2posteriors
Rcpp::List llik2posteriors(Rcpp::NumericMatrix lliks, Rcpp::NumericVector mix_coeff, Rcpp::NumericMatrix posteriors, int nthreads);
RcppExport SEXP _ehmm_llik2posteriors(SEXP lliksSEXP, SEXP mix_coeffSEXP, SEXP posteriorsSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type lliks(lliksSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type mix_coeff(mix_coeffSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type posteriors(posteriorsSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(llik2posteriors(lliks, mix_coeff, posteriors, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// mapToUnique
Rcpp::List mapToUnique(Rcpp::NumericVector values);
RcppExport SEXP _ehmm_mapToUnique(SEXP valuesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type values(valuesSEXP);
    rcpp_result_gen = Rcpp::wrap(mapToUnique(values));
    return rcpp_result_gen;
END_RCPP
}
// getMultinomConst
Rcpp::NumericVector getMultinomConst(Rcpp::NumericMatrix counts, int nthreads);
RcppExport SEXP _ehmm_getMultinomConst(SEXP countsSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type counts(countsSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(getMultinomConst(counts, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// getMultinomConstSW
Rcpp::NumericVector getMultinomConstSW(SEXP counts, int nthreads);
RcppExport SEXP _ehmm_getMultinomConstSW(SEXP countsSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type counts(countsSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(getMultinomConstSW(counts, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// sumAt
Rcpp::NumericVector sumAt(Rcpp::NumericVector values, Rcpp::IntegerVector map, int size, bool zeroIdx);
RcppExport SEXP _ehmm_sumAt(SEXP valuesSEXP, SEXP mapSEXP, SEXP sizeSEXP, SEXP zeroIdxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type values(valuesSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type map(mapSEXP);
    Rcpp::traits::input_parameter< int >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< bool >::type zeroIdx(zeroIdxSEXP);
    rcpp_result_gen = Rcpp::wrap(sumAt(values, map, size, zeroIdx));
    return rcpp_result_gen;
END_RCPP
}
// colSumsInt
Rcpp::IntegerVector colSumsInt(Rcpp::IntegerMatrix nums, int nthreads);
RcppExport SEXP _ehmm_colSumsInt(SEXP numsSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type nums(numsSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(colSumsInt(nums, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// colSumsDouble
Rcpp::NumericVector colSumsDouble(Rcpp::NumericMatrix nums, int nthreads);
RcppExport SEXP _ehmm_colSumsDouble(SEXP numsSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type nums(numsSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(colSumsDouble(nums, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// rowSumsDouble
Rcpp::NumericVector rowSumsDouble(Rcpp::NumericMatrix mat, int nthreads);
RcppExport SEXP _ehmm_rowSumsDouble(SEXP matSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type mat(matSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(rowSumsDouble(mat, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// lLikMat
void lLikMat(Rcpp::NumericMatrix counts, Rcpp::List models, Rcpp::List ucs, Rcpp::NumericVector mConst, Rcpp::NumericVector lliks, int nthreads, std::string type);
RcppExport SEXP _ehmm_lLikMat(SEXP countsSEXP, SEXP modelsSEXP, SEXP ucsSEXP, SEXP mConstSEXP, SEXP lliksSEXP, SEXP nthreadsSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type counts(countsSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type models(modelsSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type ucs(ucsSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type mConst(mConstSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type lliks(lliksSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< std::string >::type type(typeSEXP);
    lLikMat(counts, models, ucs, mConst, lliks, nthreads, type);
    return R_NilValue;
END_RCPP
}
// lLikGapMat
void lLikGapMat(SEXP counts, Rcpp::List models, Rcpp::List ucs, Rcpp::NumericVector mConst, Rcpp::NumericVector lliks, int nthreads, std::string type);
RcppExport SEXP _ehmm_lLikGapMat(SEXP countsSEXP, SEXP modelsSEXP, SEXP ucsSEXP, SEXP mConstSEXP, SEXP lliksSEXP, SEXP nthreadsSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type counts(countsSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type models(modelsSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type ucs(ucsSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type mConst(mConstSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type lliks(lliksSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< std::string >::type type(typeSEXP);
    lLikGapMat(counts, models, ucs, mConst, lliks, nthreads, type);
    return R_NilValue;
END_RCPP
}
// pwhichmax
Rcpp::IntegerVector pwhichmax(Rcpp::NumericMatrix posteriors, int nthreads);
RcppExport SEXP _ehmm_pwhichmax(SEXP posteriorsSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type posteriors(posteriorsSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(pwhichmax(posteriors, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// fitNB_inner
Rcpp::List fitNB_inner(Rcpp::NumericVector counts, Rcpp::NumericVector posteriors, double initR, double tol, bool verbose, int nthreads);
RcppExport SEXP _ehmm_fitNB_inner(SEXP countsSEXP, SEXP posteriorsSEXP, SEXP initRSEXP, SEXP tolSEXP, SEXP verboseSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type counts(countsSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type posteriors(posteriorsSEXP);
    Rcpp::traits::input_parameter< double >::type initR(initRSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(fitNB_inner(counts, posteriors, initR, tol, verbose, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// fitModels
Rcpp::List fitModels(Rcpp::NumericMatrix counts, Rcpp::NumericVector posteriors, Rcpp::List models, Rcpp::List ucs, std::string type, double tol, bool verbose, int nthreads);
RcppExport SEXP _ehmm_fitModels(SEXP countsSEXP, SEXP posteriorsSEXP, SEXP modelsSEXP, SEXP ucsSEXP, SEXP typeSEXP, SEXP tolSEXP, SEXP verboseSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type counts(countsSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type posteriors(posteriorsSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type models(modelsSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type ucs(ucsSEXP);
    Rcpp::traits::input_parameter< std::string >::type type(typeSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(fitModels(counts, posteriors, models, ucs, type, tol, verbose, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// fitModelsGapMat
Rcpp::List fitModelsGapMat(SEXP counts, Rcpp::NumericVector posteriors, Rcpp::List models, Rcpp::List ucs, std::string type, double tol, int nthreads);
RcppExport SEXP _ehmm_fitModelsGapMat(SEXP countsSEXP, SEXP posteriorsSEXP, SEXP modelsSEXP, SEXP ucsSEXP, SEXP typeSEXP, SEXP tolSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type counts(countsSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type posteriors(posteriorsSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type models(modelsSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type ucs(ucsSEXP);
    Rcpp::traits::input_parameter< std::string >::type type(typeSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(fitModelsGapMat(counts, posteriors, models, ucs, type, tol, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// checkInterrupt
void checkInterrupt();
RcppExport SEXP _ehmm_checkInterrupt() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    checkInterrupt();
    return R_NilValue;
END_RCPP
}
// smallWeightHamiltonianPath
Rcpp::IntegerVector smallWeightHamiltonianPath(Rcpp::NumericMatrix dmat);
RcppExport SEXP _ehmm_smallWeightHamiltonianPath(SEXP dmatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type dmat(dmatSEXP);
    rcpp_result_gen = Rcpp::wrap(smallWeightHamiltonianPath(dmat));
    return rcpp_result_gen;
END_RCPP
}
// setDim_unsafe
void setDim_unsafe(Rcpp::RObject obj, Rcpp::IntegerVector dims);
RcppExport SEXP _ehmm_setDim_unsafe(SEXP objSEXP, SEXP dimsSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::RObject >::type obj(objSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type dims(dimsSEXP);
    setDim_unsafe(obj, dims);
    return R_NilValue;
END_RCPP
}
// setDimnames_unsafe
void setDimnames_unsafe(Rcpp::RObject obj, Rcpp::List dimnames);
RcppExport SEXP _ehmm_setDimnames_unsafe(SEXP objSEXP, SEXP dimnamesSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::RObject >::type obj(objSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type dimnames(dimnamesSEXP);
    setDimnames_unsafe(obj, dimnames);
    return R_NilValue;
END_RCPP
}
// bindCols_numeric
Rcpp::NumericMatrix bindCols_numeric(Rcpp::List vlist, int nthreads);
RcppExport SEXP _ehmm_bindCols_numeric(SEXP vlistSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type vlist(vlistSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(bindCols_numeric(vlist, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// bindCols
Rcpp::IntegerMatrix bindCols(Rcpp::List vlist, int nthreads);
RcppExport SEXP _ehmm_bindCols(SEXP vlistSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type vlist(vlistSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(bindCols(vlist, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// bindCList
Rcpp::IntegerMatrix bindCList(Rcpp::List clist, int nthreads);
RcppExport SEXP _ehmm_bindCList(SEXP clistSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type clist(clistSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(bindCList(clist, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// writeCountsTXT
void writeCountsTXT(Rcpp::IntegerMatrix counts, std::vector<std::string> marks, std::string path);
RcppExport SEXP _ehmm_writeCountsTXT(SEXP countsSEXP, SEXP marksSEXP, SEXP pathSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type counts(countsSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type marks(marksSEXP);
    Rcpp::traits::input_parameter< std::string >::type path(pathSEXP);
    writeCountsTXT(counts, marks, path);
    return R_NilValue;
END_RCPP
}
// writeCountsTXT_double
void writeCountsTXT_double(Rcpp::NumericMatrix counts, std::vector<std::string> marks, std::string path);
RcppExport SEXP _ehmm_writeCountsTXT_double(SEXP countsSEXP, SEXP marksSEXP, SEXP pathSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type counts(countsSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type marks(marksSEXP);
    Rcpp::traits::input_parameter< std::string >::type path(pathSEXP);
    writeCountsTXT_double(counts, marks, path);
    return R_NilValue;
END_RCPP
}
// avgCountsPerClust
Rcpp::NumericMatrix avgCountsPerClust(Rcpp::IntegerMatrix counts, Rcpp::IntegerVector clusts);
RcppExport SEXP _ehmm_avgCountsPerClust(SEXP countsSEXP, SEXP clustsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type counts(countsSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type clusts(clustsSEXP);
    rcpp_result_gen = Rcpp::wrap(avgCountsPerClust(counts, clusts));
    return rcpp_result_gen;
END_RCPP
}
// tabf
Rcpp::IntegerVector tabf(Rcpp::IntegerVector v, bool naRm);
RcppExport SEXP _ehmm_tabf(SEXP vSEXP, SEXP naRmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type v(vSEXP);
    Rcpp::traits::input_parameter< bool >::type naRm(naRmSEXP);
    rcpp_result_gen = Rcpp::wrap(tabf(v, naRm));
    return rcpp_result_gen;
END_RCPP
}
// tabf2
Rcpp::IntegerMatrix tabf2(Rcpp::IntegerVector v1, Rcpp::IntegerVector v2, bool naRm);
RcppExport SEXP _ehmm_tabf2(SEXP v1SEXP, SEXP v2SEXP, SEXP naRmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type v1(v1SEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type v2(v2SEXP);
    Rcpp::traits::input_parameter< bool >::type naRm(naRmSEXP);
    rcpp_result_gen = Rcpp::wrap(tabf2(v1, v2, naRm));
    return rcpp_result_gen;
END_RCPP
}
// colSummary
Rcpp::IntegerVector colSummary(Rcpp::IntegerMatrix mat, std::string type, int nthreads);
RcppExport SEXP _ehmm_colSummary(SEXP matSEXP, SEXP typeSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type mat(matSEXP);
    Rcpp::traits::input_parameter< std::string >::type type(typeSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(colSummary(mat, type, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// getRef
Rcpp::IntegerVector getRef(Rcpp::IntegerMatrix mat, std::string type, int nthreads);
RcppExport SEXP _ehmm_getRef(SEXP matSEXP, SEXP typeSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type mat(matSEXP);
    Rcpp::traits::input_parameter< std::string >::type type(typeSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(getRef(mat, type, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// quantileNorm
Rcpp::IntegerMatrix quantileNorm(Rcpp::IntegerMatrix mat, Rcpp::IntegerVector ref, int nthreads, int seed);
RcppExport SEXP _ehmm_quantileNorm(SEXP matSEXP, SEXP refSEXP, SEXP nthreadsSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type mat(matSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type ref(refSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(quantileNorm(mat, ref, nthreads, seed));
    return rcpp_result_gen;
END_RCPP
}
// clist2mlist
Rcpp::List clist2mlist(Rcpp::List clist, int nthreads);
RcppExport SEXP _ehmm_clist2mlist(SEXP clistSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type clist(clistSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(clist2mlist(clist, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// mlist2clist
Rcpp::List mlist2clist(Rcpp::List mlist, int nthreads);
RcppExport SEXP _ehmm_mlist2clist(SEXP mlistSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type mlist(mlistSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(mlist2clist(mlist, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// testSortCounts
Rcpp::IntegerVector testSortCounts(Rcpp::IntegerVector v);
RcppExport SEXP _ehmm_testSortCounts(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(testSortCounts(v));
    return rcpp_result_gen;
END_RCPP
}
// testMeanAndMedian
int testMeanAndMedian(Rcpp::IntegerVector v, std::string type);
RcppExport SEXP _ehmm_testMeanAndMedian(SEXP vSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type v(vSEXP);
    Rcpp::traits::input_parameter< std::string >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(testMeanAndMedian(v, type));
    return rcpp_result_gen;
END_RCPP
}
// statesToSegments_helper
Rcpp::List statesToSegments_helper(Rcpp::RObject regions, Rcpp::IntegerVector states);
RcppExport SEXP _ehmm_statesToSegments_helper(SEXP regionsSEXP, SEXP statesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::RObject >::type regions(regionsSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type states(statesSEXP);
    rcpp_result_gen = Rcpp::wrap(statesToSegments_helper(regions, states));
    return rcpp_result_gen;
END_RCPP
}
// segmentsToBed
void segmentsToBed(Rcpp::RObject segments, std::vector<std::string> labels, std::vector<std::string> colors, std::string path);
RcppExport SEXP _ehmm_segmentsToBed(SEXP segmentsSEXP, SEXP labelsSEXP, SEXP colorsSEXP, SEXP pathSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::RObject >::type segments(segmentsSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type labels(labelsSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type colors(colorsSEXP);
    Rcpp::traits::input_parameter< std::string >::type path(pathSEXP);
    segmentsToBed(segments, labels, colors, path);
    return R_NilValue;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_ehmm_forward_backward", (DL_FUNC) &_ehmm_forward_backward, 6},
    {"_ehmm_viterbi", (DL_FUNC) &_ehmm_viterbi, 6},
    {"_ehmm_testSchedule", (DL_FUNC) &_ehmm_testSchedule, 3},
    {"_ehmm_testColPost", (DL_FUNC) &_ehmm_testColPost, 3},
    {"_ehmm_tabFast", (DL_FUNC) &_ehmm_tabFast, 1},
    {"_ehmm_labelCounts", (DL_FUNC) &_ehmm_labelCounts, 2},
    {"_ehmm_clusterAverages2", (DL_FUNC) &_ehmm_clusterAverages2, 4},
    {"_ehmm_clusterAverages", (DL_FUNC) &_ehmm_clusterAverages, 3},
    {"_ehmm_fillPosteriors", (DL_FUNC) &_ehmm_fillPosteriors, 4},
    {"_ehmm_rowdotprod", (DL_FUNC) &_ehmm_rowdotprod, 3},
    {"_ehmm_discretizeRows", (DL_FUNC) &_ehmm_discretizeRows, 3},
    {"_ehmm_splitAxes", (DL_FUNC) &_ehmm_splitAxes, 3},
    {"_ehmm_splitAxesInt", (DL_FUNC) &_ehmm_splitAxesInt, 3},
    {"_ehmm_KL_dist_mat_LN", (DL_FUNC) &_ehmm_KL_dist_mat_LN, 3},
    {"_ehmm_KL_dist_mat", (DL_FUNC) &_ehmm_KL_dist_mat, 3},
    {"_ehmm_findUniqueSeeds", (DL_FUNC) &_ehmm_findUniqueSeeds, 3},
    {"_ehmm_support_openmp", (DL_FUNC) &_ehmm_support_openmp, 0},
    {"_ehmm_llik2posteriors", (DL_FUNC) &_ehmm_llik2posteriors, 4},
    {"_ehmm_mapToUnique", (DL_FUNC) &_ehmm_mapToUnique, 1},
    {"_ehmm_getMultinomConst", (DL_FUNC) &_ehmm_getMultinomConst, 2},
    {"_ehmm_getMultinomConstSW", (DL_FUNC) &_ehmm_getMultinomConstSW, 2},
    {"_ehmm_sumAt", (DL_FUNC) &_ehmm_sumAt, 4},
    {"_ehmm_colSumsInt", (DL_FUNC) &_ehmm_colSumsInt, 2},
    {"_ehmm_colSumsDouble", (DL_FUNC) &_ehmm_colSumsDouble, 2},
    {"_ehmm_rowSumsDouble", (DL_FUNC) &_ehmm_rowSumsDouble, 2},
    {"_ehmm_lLikMat", (DL_FUNC) &_ehmm_lLikMat, 7},
    {"_ehmm_lLikGapMat", (DL_FUNC) &_ehmm_lLikGapMat, 7},
    {"_ehmm_pwhichmax", (DL_FUNC) &_ehmm_pwhichmax, 2},
    {"_ehmm_fitNB_inner", (DL_FUNC) &_ehmm_fitNB_inner, 6},
    {"_ehmm_fitModels", (DL_FUNC) &_ehmm_fitModels, 8},
    {"_ehmm_fitModelsGapMat", (DL_FUNC) &_ehmm_fitModelsGapMat, 7},
    {"_ehmm_checkInterrupt", (DL_FUNC) &_ehmm_checkInterrupt, 0},
    {"_ehmm_smallWeightHamiltonianPath", (DL_FUNC) &_ehmm_smallWeightHamiltonianPath, 1},
    {"_ehmm_setDim_unsafe", (DL_FUNC) &_ehmm_setDim_unsafe, 2},
    {"_ehmm_setDimnames_unsafe", (DL_FUNC) &_ehmm_setDimnames_unsafe, 2},
    {"_ehmm_bindCols_numeric", (DL_FUNC) &_ehmm_bindCols_numeric, 2},
    {"_ehmm_bindCols", (DL_FUNC) &_ehmm_bindCols, 2},
    {"_ehmm_bindCList", (DL_FUNC) &_ehmm_bindCList, 2},
    {"_ehmm_writeCountsTXT", (DL_FUNC) &_ehmm_writeCountsTXT, 3},
    {"_ehmm_writeCountsTXT_double", (DL_FUNC) &_ehmm_writeCountsTXT_double, 3},
    {"_ehmm_avgCountsPerClust", (DL_FUNC) &_ehmm_avgCountsPerClust, 2},
    {"_ehmm_tabf", (DL_FUNC) &_ehmm_tabf, 2},
    {"_ehmm_tabf2", (DL_FUNC) &_ehmm_tabf2, 3},
    {"_ehmm_colSummary", (DL_FUNC) &_ehmm_colSummary, 3},
    {"_ehmm_getRef", (DL_FUNC) &_ehmm_getRef, 3},
    {"_ehmm_quantileNorm", (DL_FUNC) &_ehmm_quantileNorm, 4},
    {"_ehmm_clist2mlist", (DL_FUNC) &_ehmm_clist2mlist, 2},
    {"_ehmm_mlist2clist", (DL_FUNC) &_ehmm_mlist2clist, 2},
    {"_ehmm_testSortCounts", (DL_FUNC) &_ehmm_testSortCounts, 1},
    {"_ehmm_testMeanAndMedian", (DL_FUNC) &_ehmm_testMeanAndMedian, 2},
    {"_ehmm_statesToSegments_helper", (DL_FUNC) &_ehmm_statesToSegments_helper, 2},
    {"_ehmm_segmentsToBed", (DL_FUNC) &_ehmm_segmentsToBed, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_ehmm(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
